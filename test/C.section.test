#!/usr/bin/env tclkit8.6
#

package require tcltest
lappend auto_path lib arec/lib

package require tna

#::tna::debug 1

source test/tna-helpers.tcl

foreach { types fmt } { { char uchar short ushort int uint long ulong } %d { float double } %.1f } {
    foreach type $types {
	foreach { x y } { 1 1 2 2 3 3 4 4 5 5 10 10 25 25 63 63 2 3 3 2 5 2 2 5 } {
	    ::tcltest::test section-1 "Section -* and alisses $type : $x $y" -body {
		tna::array create a $type $x $y
		tna::array create b $type $x $y

		tna::expr { a =    X+Y }
		tna::expr { b[-*,*] = a }

		b list
	    } -cleanup {
		a destroy
		b destroy
	    } -result  [matrix-eval $fmt (($x-1)-X)+Y $x $y]
        }
    }
}

foreach { types fmt } { { char uchar short ushort int uint long ulong } %d { float double } %.1f } {
    foreach type $types {
	foreach { x y } { 1 1 2 2 3 3 4 4 5 5 10 10 25 25 63 63 2 3 3 2 5 2 2 5 } {
	    ::tcltest::test section-1 "Section -* and alisses $type : $x $y" -body {
		tna::array create a $type $x $y
		tna::array create b $type $x $y

		tna::expr { a =    X+Y }
		tna::expr { b[:,-*] = a }

		b list
	    } -cleanup {
		a destroy
		b destroy
	    } -result  [matrix-eval $fmt X+($y-1)-Y $x $y]
        }
    }
}

proc T {matrix} {							# http://wiki.tcl.tk/2748
    set res {}
    for {set j 0} {$j < [llength [lindex $matrix 0]]} {incr j} {
	set newrow {}
	foreach oldrow $matrix {
	    lappend newrow [lindex $oldrow $j]
	}
	lappend res $newrow
    }
    return $res
}
proc I { x } { set x }

foreach { types map } { { char uchar short ushort int uint long ulong } {} { float double } { 0 0.0 3 3.0 } } {
    foreach type $types {
	foreach { edge result } {
	    incl {{0 0 0 0 0} {0 3 3 0 0} {0 3 3 0 0} {0 3 3 0 0} {0 0 0 0 0}}
	    excl {{0 0 0 0 0} {0 3 0 0 0} {0 3 0 0 0} {0 0 0 0 0} {0 0 0 0 0}} } {
	    foreach { indxType indx offs tx } {
		    XYZ [1:2,1:3] 0 I
		    ZYX [1:2,1:3] 0 T
		    XYZ [2:3,2:4] 1 I
		    ZYX [2:3,2:4] 1 T
		} {

		    ::tcltest::test section-1 "Section 1 $type $indxType $offs $edge" -body {
			tna::array create a $type 5 5 -offset $offs -index $indxType -edge $edge

			tna::expr "a$indx = 3"
			a list
		    } -cleanup {
			a destroy
		    } -result  [$tx [string map $map $result]]
	    }
	}
    }
}



# Test single index
# Test -x,-y index from end

