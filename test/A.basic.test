
package require tcltest
lappend auto_path ../lib

package require tna

source tna-helpers.tcl


::tcltest::test comment-1.0 { comment1 } -body {
    tna::array create a int 3 3

    tna::expr { # Comment at start
		a = 3 	# Following comment}
    a list
} -cleanup {
    a destroy
} -result  [matrix 3 3 3]

foreach { types result } { { char uchar short ushort int uint long ulong } 3 { float double } 3.0 } {
    foreach type $types {
	::tcltest::test 3x3-$type-1.0 { Simple array math } -body {
	    tna::array create a $type 3 3

	    tna::expr { a = 3 }
	    a list
	} -cleanup {
	    a destroy
	} -result  [matrix $result 3 3]
    }
}

foreach { types fmt } { { char short int long } %d { uchar ushort uint } %u { float double } %.1f } {
    foreach type $types {
	foreach dim { 1 { 1 1 } { 2 2 } { 3 3 } { 3 3 3 } { 1 2 3 } { 3 2 1 } { 10 10 10 } { 5 5 5 5 5 } } {
	    foreach { c = a op b } {
		      3 = 2 + 1
		     -2 = 2 - 4
		      8 = 2 * 4
		      2 = 4 / 2

		      4 =  1 << 2
		      1 =  5 %  2
		      0 =  8 %  2
		      2 =  6 &  2
		      3 =  1 |  2
		      
		      1 =  5 >  1
		      0 =  5 <  1
		      1 =  5 >= 5
		      1 =  5 <= 5
		      1 =  5 == 5
		      0 =  5 == 4

		      0 = 1 && 0
		      1 = 1 && 1
		      1 = 1 || 0
		      0 = 0 || 0
	    } {
		if { $type in { float double } && $op in $IntOnly } { continue }

		switch $type {
		 uchar   { set c [expr {      $c &        0xFF }] }
		 ushort  { set c [expr {      $c &      0xFFFF }] }
		 uint    { set c [expr { wide($c) & 0xFFFFFFFF }] }
		 ulong   { set c [expr { wide($c) & 0xFFFFFFFFFFFFFFFF }] }
		}


		::tcltest::test "$dim $type $op 1.0" "Simple array math : $c = $a $op $b" -body {
		    tna::array create a $type {*}$dim
		    tna::array create b $type {*}$dim
		    tna::array create c $type {*}$dim

		    tna::expr "	a = $a
		    		b = $b
		    		c = a $op b"
		    c list
		} -cleanup {
		    a destroy
		    b destroy
		    c destroy
		} -result  [matrix [format $fmt $c] {*}$dim]
	    }
	}
    }
}
