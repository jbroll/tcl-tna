#!/usr/bin/env tclkit8.6
#
lappend auto_path ../lib lib

package require tcltest
package require arec

proc iota { fr to { in 1 } } {
    set fr [expr $fr]
    set to [expr $to]
    for { set res {} } { $fr <= $to } { incr fr $in } {lappend res $fr } 
    set res
}


::tcltest::configure -testdir [file dirname [file normalize [info script]]] -singleproc 1 

::tcltest::test rec-dtype-size  { dtype size     } -body { arec::type  size   }		  -result 44
::tcltest::test rec-dtype-types { dtype types    } -body { arec::type types   }  	  -result {tclobj* long long long long long long long long long long}
::tcltest::test rec-dtype-types { dtype types    } -body { arec::type names   }  	  -result {name size align stype nfield afield fields set get shadow inst}
::tcltest::test rec-dtype-types { dtype types    } -body { arec::type fields  }  	  -result {tclobj* name long size long align long stype long nfield long afield long fields long set long get long shadow long inst}


::tcltest::test rec-dtype-size     { dtype size     } -body { arec::types length } 	  		   -result 10
::tcltest::test rec-dtype-types    { dtype types    } -body { arec::types 0 end get name  }  		   -result {char uchar short ushort int long float double string tclobj*}
::tcltest::test rec-dtypes-get     { dtypes get     } -body { arec::types 0 end get     name size align } -result {{char 1 1} {uchar 1 1} {short 2 2} {ushort 2 2} {int 4 4} {long 4 4} {float 4 4} {double 8 4} {string 4 4} {tclobj* 4 4}}
::tcltest::test rec-dtypes-getlist { dtypes getlist } -body { arec::types 0 end getlist name size align } -result {{char 1 1} {uchar 1 1} {short 2 2} {ushort 2 2} {int 4 4} {long 4 4} {float 4 4} {double 8 4} {string 4 4} {tclobj* 4 4}}
::tcltest::test rec-dtypes-getdict { dtypes getdict } -body { arec::types 0 end getdict name size align } -result {{name char size 1 align 1} {name uchar size 1 align 1} {name short size 2 align 2} {name ushort size 2 align 2} {name int size 4 align 4} {name long size 4 align 4} {name float size 4 align 4} {name double size 8 align 4} {name string size 4 align 4} {name tclobj* size 4 align 4}}


foreach type [arec::types 0 end get name] reply { 1 1 1 1 1 1 1.0 1.0 1 } {
    if { $type eq "tclobj*" } { continue }

    ::tcltest::test rec-$type "each type: $type" -body {
	arec::typedef blink [subst { $type 	count }]

	blink create blonk 1
	blonk set count 1
	blonk get count
    } -cleanup { rename blink {}; rename blonk {}
    } -result $reply
}


foreach i { 0 1 2 3 4 5 6 7 8 9 0 } {
    ::tcltest::test rec-$i { create type } -body {
	arec::typedef blink {
	    int 	count
	    int 	bunk
	    double  chunk
	}
	blink create blonk 4

	blonk 0 end set count 4
	blonk 0 end set bunk  4
	blonk 0 end set chunk 3.3

	blonk 0 set count 6
	blonk 3 set chunk 5.5


	blonk 0 end get
    } -cleanup { rename blonk {}
    } -result {{6 4 3.3} {4 4 3.3} {4 4 3.3} {4 4 5.5}}
}



::tcltest::test length { length+1 } -body {
    arec::typedef blink {
	double a
	int    b
	double c
    }

    blink create blonk 5

    blonk 0 end set a 3.3
    blonk 0 end set b 3
    blonk 0 end set c 5.5


    blonk end+1 set a 6
    blonk end+1 set a 7
    blonk end+1 set a 8
    blonk end+1 set a 9

    blonk 0 end get
} -cleanup { rename blonk {}
} -result  "[lrepeat 5 {3.3 3 5.5}] {6.0 0 0.0} {7.0 0 0.0} {8.0 0 0.0} {9.0 0 0.0}"

::tcltest::test set1 { set one arg } -body {
    arec::typedef blink {
	double a
	int    b
	double c
    }

    blink create blonk 5
    blonk 0 end set a 1 b 2 c 3
    blonk 0 end set [blonk 0 end get]

    blonk 0 end get
} -cleanup { rename blonk {}
} -result {{1.0 2 3.0} {1.0 2 3.0} {1.0 2 3.0} {1.0 2 3.0} {1.0 2 3.0}}

::tcltest::test setdict { sedict-1 } -body {
    arec::typedef blink {
	double a
	int    b
	double c
    }

    blink create blonk 5
    blonk 0 end set a 1 b 2 c 3
    blonk 0 end setdict [blonk 0 end getdict]

    blonk 0 end getdict
} -cleanup { rename blonk {}
} -result {{a 1.0 b 2 c 3.0} {a 1.0 b 2 c 3.0} {a 1.0 b 2 c 3.0} {a 1.0 b 2 c 3.0} {a 1.0 b 2 c 3.0}}

::tcltest::test setlist { selist-1 } -body {
    arec::typedef blink {
	double a
	int    b
	double c
    }

    blink create blonk 5
    blonk 0 end set a 1 b 2 c 3
    blonk 0 end setlist [blonk 0 end getlist]

    blonk 0 end setlist a b {{1 4} {2 8} {3 12} {4 16} {5 20}}

    blonk 0 end getlist
} -cleanup { rename blonk {}
} -result {{1.0 4 3.0} {2.0 8 3.0} {3.0 12 3.0} {4.0 16 3.0} {5.0 20 3.0}}

::tcltest::test alloc { alloc-1 } -body {
    arec::typedef blink {
	double a
	int    b
	double c
    }

    blink create blonk 0

    foreach i [iota 0 1000] {
	blonk $i set a 1 b 2 c 3
    }
} -cleanup { rename blonk {}
} -result {}

::tcltest::test setlist { selist-1 } -body {
    arec::typedef blink {
	double a
	int    b
	double c
    }

    blink create blonk 5
    lappend reply [blonk 1 get a]
    lappend reply [blonk 1 get a b]
    lappend reply [blonk 1 2 get a]
    lappend reply [blonk 1 2 get a b]

    set reply
} -cleanup { rename blonk {}
} -result {0.0 {0.0 0} {0.0 0.0} {{0.0 0} {0.0 0}}}

::tcltest::test union { union-1 } -body {
    arec::typedef union blink {
	double a
	int    b
	double c
    }

    blink create blonk 1

    blonk 0 set a 4.5
    blonk 0 get a

} -cleanup { rename blonk {}
} -result {4.5}

