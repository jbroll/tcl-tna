package provide tnaplus 1.0


critcl::tsources tnaplus.tcl tna-util.tcl	; # This file is a tcl source file for the package
critcl::csources tna-vm.c			; # The virtual machine
critcl::cheaders tna-vm.h generic.h 
critcl::cdefines TNA_* ::tna

critcl::cflags -O3
critcl::clibraries -lm


source tna-util.tcl

namespace eval tna {			  # This array defines the types avaialble in the package.
    array set Types {
	      byte { "unsigned char"    int     %d }
	     short { short		int     %d }
	    ushort { "unsigned short"	int     %d }
	       int { int 		int     %d }
	      uint { "unsigned int"	long    %d }
	      long { long		long   %ld }
	     float { float		double  %f }
	    double { double		double  %f }
    }

    set  axes { x y z u v }		; # The names of the axis index variables
    set naxes [llength $axes]
}


critcl::ccode {
    #include <stdlib.h>
    #include "/Users/john/src/tna/generic.h"
    #include "/Users/john/src/tna/tna-vm.h"		/* The cheaders directive above didn't seem to take?	*/


    extern OpTable OpCodes[];
}

proc tna::indx { dims indx } {			  # Parse the slice syntax into a list.
    foreach d $dims x [split $indx ,] {
	if { $d eq {} } { break }

	set indx [split $x :]

	if { [llength $indx] == 1 && $x != "*" } {
	    if { $x < 0 } { set x [expr $d+$x] }
	    set s $x
	    set e $x
	    set i  1
	} else {
	    lassign $indx s e i


	    if { $s eq {} || $s eq "*" } { set s  0 	      }
	    if { $e eq {}              } { set e [expr $d-1]  }
	    if { $i eq {}              } { set i  1 	      }

	    if { $s < 0 } { set s [expr $d+$s] }
	    if { $e < 0 } { set e [expr $d+$e] }
	}

	lappend list [list $s $e $i]
    }

    return $list
}

critcl::cinit {
    int i;

    for ( i = 0; i < INSTR_END; i++ ) {
	OpCodes[i].name;
    }
} {}

oo::class create tna {
    variable type dims data

    constructor { Type args } {
	set type $Type
	set dims $args

	set sum 1
	set data [tna::malloc_$type [red x $args { set sum [expr { $sum*$x }] }]]
    }
    method  slice-get { indx axes } {
	set i 0
	set indx [split $indx ,]
	foreach x $indx {
	    switch -regexp -- $x {
		{^[0-9]+$} - {^.*:.*$} - {^\*$} - {^$}   { # Skip these slice specs }
		.* { set indx [lreplace $indx $i $i  *]	 ; # Replace the slice axis index with the user expression.
		     set axes [lreplace $axes $i $i $x]
		}
	    }
	    incr i
	}

	lappend ::tna::slices [set slice [tna::mkslice $data $dims [tna::indx $dims [join $indx ,]]]]

	return "tna::get_$type[llength $dims] $slice [join [lrange $axes 0 [llength $dims]-1]]"
    }
    method  set { slice body } {
	set item \$[join [lrange $::tna::axes 0 [llength $dims]-1] " \$"]	; # Parse the user value expression.
	set body [subst -novariables						\
	         [regsub -all {%([a-zA-Z][0-9a-zA-Z]*)(\(([^)]+)\))?} 		\
	    	 [string map { [ \\[ } $body]    				\
			 "\\\[\[\\1 slice-get [list \\3] \$item]]"]]

	lappend ::tna::slices [set slice [tna::mkslice $data $dims [tna::indx $dims $slice]]]

	uplevel [list ::tna::sliceloop [set ::tna::TNA_$type] [llength $dims] $slice $::tna::axes $body]

	tna::free-slices
    }
    proc ::tna::free-slices {} {
	foreach slice $::tna::slices { tna::free $slice }
	set ::tna::slices {}
    }

    method data {} { return $data }

    method list {} {					  # Return the data as a list.
	set items 1
	set items [red x $dims { set items [expr { $items*$x }] }]

	lappend ::tna::slices [set slice [tna::mkslice $data $items [list [list 0 $items 1]]]]

	set list [my List-Helper $slice [lreverse $dims] 0]
	tna::free-slices
 	return $list
    }
    method List-Helper { slice dims offs } {
	set d [lindex $dims 0]
		
	if { [llength $dims] == 1 } {
	    for { set i 0 } { $i < $d } { incr i } {
		lappend reply [tna::get_${type}1 $slice $offs]
		incr offs 1
	    }    
	} else {

	    for { set i 0 } { $i < $d } { incr i } {
		lappend reply [my List-Helper $slice [lrange $dims 1 end] $offs]

		set sum 1
		incr offs [red x [lrange $dims 1 end] { set sum [expr { $sum*$x }] }]
	    }
	}

	return $reply
    }
}

